name: Docker Image CI/CD

on:
  push:
    branches: [ "QA" ]

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout del código fuente
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Obtener información del commit para versiones
    - name: Extract version from Git
      id: vars
      run: |
        echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "version_tag=$(date +'%Y%m%d')-${{ github.run_number }}" >> $GITHUB_ENV

    # 3. Log in en DockerHub
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 4. Construir y subir la imagen Docker a DockerHub
    - name: Build and push Docker image
      run: |
        docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/tercera-pagina:${{ env.version_tag }} --tag ${{ secrets.DOCKER_USERNAME }}/tercera-pagina:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/tercera-pagina:${{ env.version_tag }}
        docker push ${{ secrets.DOCKER_USERNAME }}/tercera-pagina:latest

  deploy:
    name: Deploy to QA Instances
    runs-on: ubuntu-latest
    needs: build-and-push
    strategy:
      matrix:
        instance:
          - host: ${{ secrets.QA_HOST_1 }}
            name: qa-instance-1
          - host: ${{ secrets.QA_HOST_2 }}
            name: qa-instance-2

    steps:
    # 1. Conectar a cada instancia QA y desplegar la aplicación
    - name: Deploy to QA - ${{ matrix.instance.name }}
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ matrix.instance.host }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY_1 }}
        port: 22
        script: |
          # Actualizar el sistema y configurar Docker
          sudo yum update -y
          sudo yum install -y docker
          sudo service docker start
          sudo usermod -a -G docker ec2-user
          
          # Descargar la nueva imagen y detener/eliminar el contenedor actual
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/tercera-pagina:latest
          sudo docker ps -q --filter "name=tercera-pagina" | grep -q . && \
            sudo docker stop tercera-pagina && sudo docker rm tercera-pagina || true
          
          # Ejecutar el nuevo contenedor
          sudo docker run -d --name tercera-pagina -p 80:80 ${{ secrets.DOCKER_USERNAME }}/tercera-pagina:latest
